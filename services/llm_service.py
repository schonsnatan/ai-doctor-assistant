from groq import Groq
from dotenv import load_dotenv
import os
from core.patient import Patient

load_dotenv()

class LLMService:

    def __init__(self):
        self.client = Groq(api_key=os.getenv("GROQ_API_KEY")) 

    def generate_medicine_query(self, patient_data: dict):
        first_response = self.client.chat.completions.create(
        model="llama3-70b-8192",
        messages=[
                {
                "role": "system",
                "content": (
                    '''Voc√™ √© um motor de busca biom√©dico. Sua tarefa √© converter um quadro cl√≠nico em uma lista de termos t√©cnicos para uma busca vetorial em uma base de dados de medicamentos.

                    **Objetivo:** Gerar uma string, separada por v√≠rgulas, contendo os termos mais relevantes para encontrar medicamentos adequados.

                    **O que incluir na sua resposta:**
                    - Classes terap√™uticas relevantes (ex: "analg√©sico", "antipir√©tico", "anti-inflamat√≥rio n√£o esteroide", "anti-histam√≠nico").
                    - Princ√≠pios ativos potencialmente indicados (ex: "ibuprofeno", "loratadina").
                    - Mecanismos de a√ß√£o, se aplic√°vel (ex: "inibidor da COX-2").
                    - Sintomas-chave a serem tratados (ex: "tosse produtiva", "congest√£o nasal", "dor de cabe√ßa tensional").

                    **Regras CR√çTICAS:**
                    1.  **NUNCA** inclua na sua lista qualquer termo (princ√≠pio ativo, classe, etc.) que esteja presente nas 'Alergias' ou 'Rea√ß√µes adversas passadas' do paciente.
                    2.  Sua sa√≠da deve ser **APENAS** a lista de termos, separados por v√≠rgula. N√£o adicione frases como "Com base no quadro, os termos s√£o:" ou qualquer outra explica√ß√£o.

                    **Exemplo de sa√≠da desejada para um paciente com febre e dor no corpo, sem alergias:**
                    analg√©sico, antipir√©tico, anti-inflamat√≥rio, ibuprofeno, dor de cabe√ßa, febre, dor muscular
                    '''
                    )
                },
                {
                "role": "user",
                "content": patient_data
                }
            ]
        )
        return first_response.choices[0].message.content

    def generate_final_medicine_suggestion(self, patient_data: dict, docs, initial_analysis):
        if not docs:
            return "Com base na an√°lise inicial, n√£o foi encontrado nenhum medicamento seguro no banco de dados que n√£o esteja associado √†s alergias ou rea√ß√µes adversas do paciente. Recomenda-se uma avalia√ß√£o m√©dica mais aprofundada."

        docs_text = "\n---\n".join([doc.page_content for doc in docs])

        # üß† Etapa 3: Faz nova pergunta √† LLM, agora com contexto do RAG
        final_prompt = (
            f"{patient_data}\n"
            f"An√°lise cl√≠nica inicial da IA:\n{initial_analysis}\n\n"
            f"Lista de medicamentos encontrados com base nessa an√°lise:\n{docs_text}\n\n"
            f"Com base no hist√≥rico cl√≠nico do paciente, nas alergias e rea√ß√µes passadas, e nos medicamentos encontrados, indique as melhores op√ß√µes, justificando clinicamente sua recomenda√ß√£o. "
            f"Evite sugerir medicamentos com risco potencial. Use linguagem acess√≠vel."
        )

        final_response = self.client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Voc√™ √© uma IA m√©dica confi√°vel. Avalie cuidadosamente os dados cl√≠nicos e os medicamentos encontrados e d√™ sugest√µes seguras e bem fundamentadas. "
                        "Evite qualquer men√ß√£o a medicamentos que o paciente n√£o deve utilizar."
                    )
                },
                {
                    "role": "user",
                    "content": final_prompt
                }
            ]
        )

        print("üî¨ Documentos retornados pelo RAG:\n", docs_text)  # Para debug opcional
        return final_response.choices[0].message.content

    def generate_exam_suggestion(self, patient_data: dict):
        final_response = self.client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Voc√™ √© uma IA m√©dica confi√°vel. Avalie cuidadosamente os dados cl√≠nicos e os medicamentos encontrados e d√™ sugest√µes seguras e bem fundamentadas de exames que o paciente poderia fazer. "
                        "Evite qualquer men√ß√£o a medicamentos que o paciente n√£o deve utilizar."
                    )
                },
                {
                    "role": "user",
                    "content": patient_data
                }
            ]
        )
        return final_response.choices[0].message.content