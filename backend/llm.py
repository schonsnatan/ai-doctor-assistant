# llm.py
from groq import Groq
from dotenv import load_dotenv
import os
from backend.rag_pipeline import get_medicines

load_dotenv()

def get_ai_answer(patient_info: dict) -> str:
    client = Groq(api_key=os.getenv("GROQ_API_KEY"))

    base_prompt = (
        f"Sexo: {patient_info['sex']}\n"
        f"Idade: {patient_info['age']}\n"
        f"Dura√ß√£o do sintoma: {patient_info['duration']}\n"
        f"Sintomas: {', '.join(patient_info['sintomas'])}\n"
        f"Condi√ß√µes: {', '.join(patient_info['condicoes'])}\n"
        f"Alergias: {', '.join(patient_info['alergias'])}\n"
        f"Medicamentos cont√≠nuos: {patient_info['med_continuo']}\n"
        f"Rea√ß√µes adversas passadas: {patient_info['reacoes']}\n"
        f"Diagn√≥stico inicial do doutor: {patient_info['diagnostico']}\n"
        f"Informa√ß√£o desejada: {patient_info['info_desejada']}\n"
    )

    first_response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=[
            {
                "role": "system",
                "content": (
                    '''Voc√™ √© um motor de busca biom√©dico. Sua tarefa √© converter um quadro cl√≠nico em uma lista de termos t√©cnicos para uma busca vetorial em uma base de dados de medicamentos.

                    **Objetivo:** Gerar uma string, separada por v√≠rgulas, contendo os termos mais relevantes para encontrar medicamentos adequados.

                    **O que incluir na sua resposta:**
                    - Classes terap√™uticas relevantes (ex: "analg√©sico", "antipir√©tico", "anti-inflamat√≥rio n√£o esteroide", "anti-histam√≠nico").
                    - Princ√≠pios ativos potencialmente indicados (ex: "ibuprofeno", "loratadina").
                    - Mecanismos de a√ß√£o, se aplic√°vel (ex: "inibidor da COX-2").
                    - Sintomas-chave a serem tratados (ex: "tosse produtiva", "congest√£o nasal", "dor de cabe√ßa tensional").

                    **Regras CR√çTICAS:**
                    1.  **NUNCA** inclua na sua lista qualquer termo (princ√≠pio ativo, classe, etc.) que esteja presente nas 'Alergias' ou 'Rea√ß√µes adversas passadas' do paciente.
                    2.  Sua sa√≠da deve ser **APENAS** a lista de termos, separados por v√≠rgula. N√£o adicione frases como "Com base no quadro, os termos s√£o:" ou qualquer outra explica√ß√£o.

                    **Exemplo de sa√≠da desejada para um paciente com febre e dor no corpo, sem alergias:**
                    analg√©sico, antipir√©tico, anti-inflamat√≥rio, ibuprofeno, dor de cabe√ßa, febre, dor muscular
                    '''
                )
            },
            {
                "role": "user",
                "content": base_prompt
            }
        ]
    )

    initial_analysis = first_response.choices[0].message.content

    retrieved_docs_raw = get_medicines(initial_analysis, k=30)

    filtered_docs = filter_allergic_medicines(
        documents=retrieved_docs_raw,
        allergies=patient_info['alergias'],
        reactions=patient_info['reacoes']
    )

    if not filtered_docs:
        return "Com base na an√°lise inicial, n√£o foi encontrado nenhum medicamento seguro no banco de dados que n√£o esteja associado √†s alergias ou rea√ß√µes adversas do paciente. Recomenda-se uma avalia√ß√£o m√©dica mais aprofundada."

    docs_text = "\n---\n".join([doc.page_content for doc in filtered_docs])

    # üß† Etapa 3: Faz nova pergunta √† LLM, agora com contexto do RAG
    final_prompt = (
        f"{base_prompt}\n"
        f"An√°lise cl√≠nica inicial da IA:\n{initial_analysis}\n\n"
        f"Lista de medicamentos encontrados com base nessa an√°lise:\n{docs_text}\n\n"
        f"Com base no hist√≥rico cl√≠nico do paciente, nas alergias e rea√ß√µes passadas, e nos medicamentos encontrados, indique as melhores op√ß√µes, justificando clinicamente sua recomenda√ß√£o. "
        f"Evite sugerir medicamentos com risco potencial. Use linguagem acess√≠vel."
    )

    final_response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=[
            {
                "role": "system",
                "content": (
                    "Voc√™ √© uma IA m√©dica confi√°vel. Avalie cuidadosamente os dados cl√≠nicos e os medicamentos encontrados e d√™ sugest√µes seguras e bem fundamentadas. "
                    "Evite qualquer men√ß√£o a medicamentos que o paciente n√£o deve utilizar."
                )
            },
            {
                "role": "user",
                "content": final_prompt
            }
        ]
    )

    print("üî¨ Documentos retornados pelo RAG:\n", docs_text)  # Para debug opcional
    return final_response.choices[0].message.content


def filter_allergic_medicines(documents: list, allergies: list, reactions: str) -> list:
    """
    Filtra documentos de medicamentos que cont√™m subst√¢ncias al√©rgicas ou que causaram rea√ß√µes.
    """
    # Junta todas as subst√¢ncias a serem evitadas em uma lista
    forbidden_terms = [a.strip().lower() for a in allergies if a.strip()]
    if reactions.strip():
        # Adiciona tamb√©m as rea√ß√µes passadas como termos a serem evitados
        forbidden_terms.extend([r.strip().lower() for r in reactions.split(',') if r.strip()])
    
    if not forbidden_terms:
        return documents

    safe_docs = []
    for doc in documents:
        content_lower = doc.page_content.lower()
        is_forbidden = False
        for term in forbidden_terms:
            # Verifica se o termo proibido est√° no conte√∫do do documento
            if term in content_lower:
                is_forbidden = True
                print(f"DEBUG: Documento descartado por conter '{term}'.") # Opcional: para debug
                break
        
        if not is_forbidden:
            safe_docs.append(doc)
            
    return safe_docs